import sys, binascii, os,struct

SIZE_INC = 64
IV_SIZE = 256
MIN_SIZE = 64*8-IV_SIZE

def pad_msg(msg):
	if len(msg) < MIN_SIZE/8:
		blocksize = MIN_SIZE/8
	else:
		blocksize = SIZE_INC/8
	while not (len(msg) % blocksize == 0): 
		msg.append(0x00)
	return msg
 
def compute_IV(msg_len):
	TheNumberE = int(2718281828459045235360287471352662497757247093699959574)
	IVstr = '0E{0:x}'.format(TheNumberE)

	# We don't pad the message instead we store the message in the message input
	msg_lenStr = '{:x}'.format(int(msg_len)).zfill(64/8 * 2) #64 bits 
	IVstr += msg_lenStr
	return bytearray.fromhex(IVstr)

# From PRESENT 
# Maximum differential probability of a present S-box is 1/(2**2)
sbox4 = [0xC, 0x5, 0x6, 0xB, 0x9, 0x0, 0xA, 0xD, 0x3, 0xE, 0xF, 0x8, 0x4, 0x7, 0x1, 0x2]

def SubBytes4x4(x):
	assert(type(x) is bytearray)
	for i in xrange(len(x)):
		w1 = x[i]>>4
		w2 = x[i]&0x0F
		x[i] = (sbox4[w1]<<4) + sbox4[w2] 

def ShiftColumns(x):
	tmpx = [b for b in x]
	cols = 16
	rows = len(x)/cols
	for i in xrange(len(x)):
		col = i % cols + 1
		x[(i+cols*col) % len(x)] = tmpx[i]

def Xor1(x):
	acc = 0x0
	for i in xrange(len(x)):
		x[i] = acc ^ x[i]
		x[i] = (sbox4[x[i]>>4]<<4) + sbox4[x[i]&0x0F] 
		acc = x[i]

def Xor2(x):
	acc = 0x0
	for i in xrange(len(x)):
		x[-i] = acc ^ x[-i]
		x[-i] = (sbox4[x[-i]>>4]<<4) + sbox4[x[-i]&0x0F] 
		acc = x[-i]

# Computed using MDS.sage to find linear form of the 8x8 MDS step from Kalyna
# https://github.com/okazymyrov/MDS/
linear_MDS = [
				[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0],
				[0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1],
				[0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0],
				[0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,1,1],
				[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1],
				[0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1],
				[0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0],
				[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0],
				[0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1],
				[0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1],
				[1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1],
				[0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0],
				[0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0],
				[0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1],
				[0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0],
				[0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1],
				[1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1],
				[1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1],
				[1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1],
				[0,1,1,1,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0],
				[0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0],
				[0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1],
				[0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0],
				[0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0],
				[0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
				[1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
				[1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1],
				[0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0],
				[0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1],
				[0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1],
				[0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1],
				[0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0],
				[0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
				[0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0],
				[1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0],
				[0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0],
				[0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0],
				[0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0],
				[0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1],
				[1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0],
				[0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
				[0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0],
				[0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,1],
				[0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1],
				[0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1],
				[0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0],
				[0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1],
				[1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
				[0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
				[1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
				[0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0],
				[0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],
				[0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0],
				[0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0],
				[0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1],
				[1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0],
				[0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
				[0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
				[0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0],
				[0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0],
				[0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0],
				[0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0],
				[0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1]
			]

def MDS(x):
	for i in xrange(len(x)/8):
		row = x[i*8:i*8+8]
		row_bits = []
		for b in row:
			x0 = (b >> 7) & 0x1; x1 = (b >> 6) & 0x1; x2 = (b >> 5) & 0x1; x3 = (b >> 4) & 0x1
			x4 = (b >> 3) & 0x1; x5 = (b >> 2) & 0x1; x6 = (b >> 1) & 0x1; x7 = (b >> 0) & 0x1
			row_bits.extend([x0,x1,x2,x3,x4,x5,x6,x7])

		new_row = []
		for ypos in xrange(64):
			new_bit = 0
			for xpos in xrange(64):
				new_bit ^= row_bits[xpos] & linear_MDS[xpos][ypos]
			new_row.append(new_bit)

		for j in xrange(8):
			x[i*8+j] = (new_row[j*8]<<7) + (new_row[j*8+1]<<6) + (new_row[j*8+2]<<5) + (new_row[j*8+3]<<4) + (new_row[j*8+4]<<3) + (new_row[j*8+5]<<2) + (new_row[j*8+6]<<1) + (new_row[j*8+7])


def MCHardening(x):
	for i in xrange(IV_SIZE/8):
		acc = i&0xFF
		for j in xrange(len(x)/(IV_SIZE/8) - IV_SIZE):
			acc ^= x[j*IV_SIZE] & x[(j+1)*IV_SIZE]
		x[-i] ^= acc


def run(msg):
	assert(type(msg) is bytearray)
	l = len(msg)

	IV = compute_IV(l); assert(len(IV) == IV_SIZE/8)
	pmsg = pad_msg(msg); assert(len(pmsg)%(64/8) == 0)
	state = pmsg + IV

	for r in xrange(10):
		if r < 6:
			SubBytes4x4(state)
			ShiftColumns(state)
			MDS(state)
		elif r < 8:
			Xor1(state)
			MDS(state)
			ShiftColumns(state)
			Xor2(state)
			MDS(state)
			ShiftColumns(state)
		elif r < 10:
			SubBytes4x4(state)
			ShiftColumns(state)
			MDS(state)

	MCHardening(state)

	return state[-(IV_SIZE/8):]


def findrepeats(x, peats):
	ddd = {}
	for i in xrange(peats, len(x)):
		word = binascii.hexlify(x[i-peats:i])
		if word in ddd:
			ddd[word]+=1
		else:
			ddd[word]=1
	for word in ddd:
		if ddd[word] > 1:
			print word, ddd[word], len(ddd)

def unittests():
	# Test shift columns
	shiftee = bytearray.fromhex(
	"0102030405060708090a0b0c0d0e0f55"+
	"00000000000000000000000000000000"+
	"00000000000000000000000000000000"+
	"00000000000000000000000000000000"+
	"eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"+
	"00000000000000000000000000000000"+
	"00000000000000000000000000000000"+
	"00000000000000000000000000000000")

	xstr = binascii.hexlify(shiftee)
	ShiftColumns(shiftee)
	shifted = binascii.hexlify(shiftee)

	expected = (
	"000000ee00000008000000ee00000055"+
	"01000000ee00000009000000ee000000"+
	"0002000000ee0000000a000000ee0000"+
	"000003000000ee0000000b000000ee00"+
	"00000004000000ee0000000c000000ee"+
	"ee00000005000000ee0000000d000000"+
	"00ee00000006000000ee0000000e0000"+
	"0000ee00000007000000ee0000000f00")

	assert(shifted == expected)

def test_vectors():
	print "Testing..."

	# Test padding
	out1 = run(bytearray.fromhex("00"))
	out2 = run(bytearray.fromhex("1231231231234354353464564654654234"))
	out3 = run(bytearray.fromhex
	out4 = run(bytearray.fromhex
	out5 = run(bytearray.fromhex
	out6 = run(bytearray.fromhex("000F000F"))
	out7 = run(bytearray.fromhex("11"))
	out8 = run(bytearray.fromhex("EFEFEFEFEFE00000000000000000000000"))
	out9 = run(bytearray.fromhex("00000000000000000000000EFEFEFEFEFE"))
	out10 = run(bytearray.fromhex("010101010101010101010010101001010101010101001011"))

	print 1, binascii.hexlify(out1)
	print 2, binascii.hexlify(out2)
	print 3, binascii.hexlify(out3)
	print 4, binascii.hexlify(out4)
	print 5, binascii.hexlify(out5)
	print 6, binascii.hexlify(out6)
	print 7, binascii.hexlify(out7)
	print 8, binascii.hexlify(out8)
	print 9, binascii.hexlify(out9)
	print 10, binascii.hexlify(out10)

	unittests()

def error():
	print("Vellum hash function: missing argument")
	print("Usage: vellum.py [OPTION...] [input]")
	print("-f \t hash file")
	print("-h \t hash hex string.")		
	print("-t \t run test vectors.")	

def main():
	output = ""

	if len(sys.argv) > 1:
		if sys.argv[1] == "-f" and len(sys.argv) == 3:
			filepath = sys.argv[2]
			with open(filepath, 'rb') as f:
				msg = f.read()
				print binascii.hexlify(msg)
				output = run(bytearray(msg))
		elif sys.argv[1] == "-h" and len(sys.argv) == 3:
			hexstr = sys.argv[2]
			output = run(bytearray.fromhex(hexstr))
		elif sys.argv[1] == "-t":
			test_vectors()
		else:
			error()
	else:
		error()

	print binascii.hexlify(output)

if __name__ == "__main__":
	main() 